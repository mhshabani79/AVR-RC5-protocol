;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdint.h>
;#include <stdbool.h>
;
;#define ADDR_LEN 5
;#define DATA_LEN 6
;#define MODULATION_LEN 32
;
;//Functions.
;void send_command(bool bit_toggle, uint8_t addr, uint8_t data);
;void bit_generator(bool mode);
;interrupt[EXT_INT0] void ext0_isr(void);
;
;
;interrupt[EXT_INT0] void ext0_isr(void)
; 0000 0010 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0011     switch(PINC & 0x0F)
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0012     {
; 0000 0013         case 0b0001:
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0014             send_command(1, 0b11001, 0b001001);
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0015             break;
;PCODE: $00000019 VOL: 0
; 0000 0016         case 0b0010:
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0017             send_command(1, 0b11001, 0b010011);
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0018             break;
;PCODE: $00000023 VOL: 0
; 0000 0019         case 0b0100:
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 001A             send_command(1, 0b11001, 0b011010);
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 001B             break;
;PCODE: $0000002D VOL: 0
; 0000 001C         case 0b1000:
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 001D             send_command(1, 0b11001, 0b100110);
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 001E             break;
;PCODE: $00000037 VOL: 0
; 0000 001F     }
;PCODE: $00000038 VOL: 0
; 0000 0020     MCUCR |= (1<<SE);
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 0021 }
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;
;void bit_generator(bool mode)
; 0000 0024 {
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0025     uint8_t pulse_counter = 0;
; 0000 0026     PORTA.0 = !mode;
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;	mode -> Y+1
;	pulse_counter -> R17
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0027     TCNT0 = 0x00;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 0028     TCCR0 = (1<<CS00) | (1<<WGM01);
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0029     while(pulse_counter != (MODULATION_LEN*2*2)-1 )
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 002A     {
; 0000 002B         if(TIFR & (1<<OCF0))
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 002C         {
; 0000 002D             TCNT0 = 0x00;
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 002E             TIFR |= (1<<OCF0);
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 002F 
; 0000 0030             if(!mode)
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 0031                 PORTA.0 = ~PORTA.0;
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 0032             else
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 0033                 PORTA.0 = 0;
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 0034 
; 0000 0035             pulse_counter++;
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 0036             if(pulse_counter == MODULATION_LEN*2-1)
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 0037                 mode = !mode;
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 0038         }
;PCODE: $0000007A VOL: 0
; 0000 0039     }
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 003A     TCCR0 = 0x00;
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 003B     return;
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 003C }
;PCODE: $00000084 VOL: 0
;
;void send_command(bool bit_toggle, uint8_t addr, uint8_t data)
; 0000 003F {
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 0040     int8_t i;
; 0000 0041     bit_generator(!bit_toggle);
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;	bit_toggle -> Y+3
;	addr -> Y+2
;	data -> Y+1
;	i -> R17
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 0042     bit_generator(!bit_toggle);
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 0043     bit_generator(bit_toggle);
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 0044     for(i=ADDR_LEN-1; i>=0; i--)
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 0045         bit_generator((addr>>i)&0x01);
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 0046 for(i=6 -1; i>=0; i--)
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 0047         bit_generator((data>>i)&0x01);
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 0048 return;
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 0049 }
;PCODE: $000000BD VOL: 0
;
;
;void main()
; 0000 004D {
;PCODE: $000000BE VOL: 0
; 0000 004E     TCCR0 = 0x00;                        //(1<<CS00) | (1<<WGM01);      //No prescalar +  CTC mode.
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 004F     TCNT0 = 0x00;
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 0050     OCR0 =  0x6F;                        //111 in Decimal --> 8 Mhz / 111 = 72 Khz.
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 0051     DDRA.0 = 1;                          //assign PortA.0 as output.
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 0052     PORTA.0 = 0;
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 0053     DDRC = 0x00;                         //assign PinD for switches.
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 0054     GICR = (1<<INT0);                    //enable External Interrupt0.
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 0055     MCUCR = (1<<ISC00) | (1<<ISC01);     //exteranl Interuupt sensitive to RisingEdge.
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 0056     MCUCR |= (1<<SE) | (1<<SM1);         //Enable Sleep mode(power off).
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 0057     SREG |= 0x80;                        //Enable Global Interrupt Bit.
;PCODE: $000000D2 VOL: 0
; 0000 0058     DDRB = 0xFF; PORTB=0;
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 0059 
; 0000 005A     while(1)
;PCODE: $000000D7 VOL: 0
; 0000 005B     {
; 0000 005C     }
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 005D }
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
