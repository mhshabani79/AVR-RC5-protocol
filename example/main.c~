#include <mega32.h>
#include <stdint.h>
#include <stdbool.h>

#define ADDR_LEN 5
#define DATA_LEN 6 
#define MODULATION_LEN 32

//Functions.
void send_command(bool bit_toggle, uint8_t addr, uint8_t data);
void bit_generator(bool mode);
interrupt[EXT_INT0] void ext0_isr(void);


interrupt[EXT_INT0] void ext0_isr(void)
{
    switch(PINC & 0x0F)
    {
        case 0b0001:
            send_command(1, 0b11001, 0b001001);
            break;
        case 0b0010:
            send_command(1, 0b11001, 0b010011);
            break;
        case 0b0100:
            send_command(1, 0b11001, 0b011010);
            break;
        case 0b1000:
            send_command(1, 0b11001, 0b100110);
            break;
    }
    MCUCR |= (1<<SE);
}
 
void bit_generator(bool mode)
{
    uint8_t pulse_counter = 0;
    PORTA.0 = !mode; 
    TCNT0 = 0x00;  
    TCCR0 = (1<<CS00) | (1<<WGM01);
    while(pulse_counter != (MODULATION_LEN*2*2)-1 )
    {
        if(TIFR & (1<<OCF0))
        {
            TCNT0 = 0x00;
            TIFR |= (1<<OCF0);
            
            if(!mode)
                PORTA.0 = ~PORTA.0;
            else
                PORTA.0 = 0;
                
            pulse_counter++;
            if(pulse_counter == MODULATION_LEN*2-1)
                mode = !mode;    
        }   
    }
    TCCR0 = 0x00;
    return;
}

void send_command(bool bit_toggle, uint8_t addr, uint8_t data)
{
    int8_t i;
    bit_generator(!bit_toggle);
    bit_generator(!bit_toggle);
    bit_generator(bit_toggle); 
    for(i=ADDR_LEN-1; i>=0; i--)
        bit_generator((addr>>i)&0x01);
    for(i=DATA_LEN-1; i>=0; i--)
        bit_generator((data>>i)&0x01);       
    return;
}

                      
void main()
{
    TCCR0 = 0x00;                        //(1<<CS00) | (1<<WGM01);      //No prescalar +  CTC mode.  
    TCNT0 = 0x00;
    OCR0 =  0x6F;                        //111 in Decimal --> 8 Mhz / 111 = 72 Khz.   
    DDRA.0 = 1;                          //assign PortA.0 as output.
    PORTA.0 = 0;
    DDRC = 0x00;                         //assign PinD for switches.
    GICR = (1<<INT0);                    //enable External Interrupt0.
    MCUCR = (1<<ISC00) | (1<<ISC01);     //exteranl Interuupt sensitive to RisingEdge.
    MCUCR |= (1<<SE) | (1<<SM1);         //Enable Sleep mode(power off).   
    SREG |= 0x80;                        //Enable Global Interrupt Bit.
       
    while(1)
    {
    }
}